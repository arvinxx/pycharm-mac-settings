<templateSet group="JavaScript Testing">
  <template name="it" value="it('should $NAME$', () =&gt; {&#10;  $END$&#10;}); " description="Inserts it() block" toReformat="true" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="descr" value="describe('$NAME$',  () =&gt; {&#10;  $END$&#10;});" description="Inserts describe() block" toReformat="true" toShortenFQNames="true">
    <variable name="NAME" expression="jsMethodName()" defaultValue="" alwaysStopAt="true" />
    <context />
  </template>
  <template name="bfe" value="beforeEach( () =&gt; {&#10;  $END$&#10;});" description="Inserts beforeEach() block" toReformat="true" toShortenFQNames="true">
    <context />
  </template>
  <template name="afe" value="afterEach(() =&gt; {&#10;  $END$&#10;});" description="Inserts afterEach() block" toReformat="true" toShortenFQNames="true">
    <context />
  </template>
  <template name="af" value="after(() =&gt; {&#10;  $END$&#10;});" description="Inserts after() block" toReformat="true" toShortenFQNames="true">
    <context />
  </template>
  <template name="bf" value="before( () =&gt; {&#10;  $END$&#10;});" description="Inserts before() block" toReformat="true" toShortenFQNames="true">
    <context />
  </template>
  <template name="tstst" value="import React from 'react';&#10;import { shallow } from 'enzyme';&#10;import { spy } from 'sinon';&#10;import App, { I$Name$Props } from './$Name$';&#10;&#10;const setup = () =&gt; {&#10;  const dispatch = spy();&#10;  const props: I$Name$Props = {&#10;&#10;  };&#10;  const wrapper = shallow(&lt;App {...props} dispatch={dispatch} /&gt;);&#10;  return { props, wrapper, dispatch };&#10;};&#10;&#10;&#10;const { wrapper, dispatch, props } = setup();&#10;afterEach(() =&gt; {&#10;  dispatch.resetHistory();&#10;});&#10;&#10;$END$" description="测试前置代码" toReformat="false" toShortenFQNames="true">
    <variable name="Name" expression="fileName()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
</templateSet>